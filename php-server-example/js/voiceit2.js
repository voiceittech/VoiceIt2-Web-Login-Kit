var Modal=function(){"use strict";function t(){}function e(t){return t()}function n(){return Object.create(null)}function i(t){t.forEach(e)}function o(t){return"function"==typeof t}function a(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function r(t,e){t.appendChild(e)}function l(t,e,n){t.insertBefore(e,n||null)}function s(t){t.parentNode.removeChild(t)}function c(t){return document.createElement(t)}function d(t){return document.createTextNode(t)}function u(){return d(" ")}function p(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function f(t,e,n,i){t.style.setProperty(e,n,i?"important":"")}let h;function g(t){h=t}const m=[],b=[],y=[],v=[],x=Promise.resolve();let $=!1;function w(t){y.push(t)}let k=!1;const _=new Set;function T(){if(!k){k=!0;do{for(let t=0;t<m.length;t+=1){const e=m[t];g(e),z(e.$$)}for(g(null),m.length=0;b.length;)b.pop()();for(let t=0;t<y.length;t+=1){const e=y[t];_.has(e)||(_.add(e),e())}y.length=0}while(m.length);for(;v.length;)v.pop()();$=!1,k=!1,_.clear()}}function z(t){if(null!==t.fragment){t.update(),i(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(w)}}const L=new Set;function A(t,e){-1===t.$$.dirty[0]&&(m.push(t),$||($=!0,x.then(T)),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function C(a,r,l,c,d,u,p=[-1]){const f=h;g(a);const m=a.$$={fragment:null,ctx:null,props:u,update:t,not_equal:d,bound:n(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:n(),dirty:p,skip_bound:!1};let b=!1;if(m.ctx=l?l(a,r.props||{},((t,e,...n)=>{const i=n.length?n[0]:e;return m.ctx&&d(m.ctx[t],m.ctx[t]=i)&&(!m.skip_bound&&m.bound[t]&&m.bound[t](i),b&&A(a,t)),e})):[],m.update(),b=!0,i(m.before_update),m.fragment=!!c&&c(m.ctx),r.target){if(r.hydrate){const t=function(t){return Array.from(t.childNodes)}(r.target);m.fragment&&m.fragment.l(t),t.forEach(s)}else m.fragment&&m.fragment.c();r.intro&&((y=a.$$.fragment)&&y.i&&(L.delete(y),y.i(v))),function(t,n,a){const{fragment:r,on_mount:l,on_destroy:s,after_update:c}=t.$$;r&&r.m(n,a),w((()=>{const n=l.map(e).filter(o);s?s.push(...n):i(n),t.$$.on_mount=[]})),c.forEach(w)}(a,r.target,r.anchor),T()}var y,v;g(f)}function E(e){let n,i,o,a,h,g,m,b,y,v,x,$,w,k;return{c(){var t,r,l;n=c("div"),i=c("p"),o=d("biometricType: "),a=d(e[0]),h=u(),g=c("p"),m=d("callType: "),b=d(e[1]),y=u(),v=c("p"),x=d("doLiveness: "),$=d(e[2]),w=u(),k=c("div"),k.innerHTML='<i class="close icon" style="top: 1rem; right: 1rem; color: rgb(255, 255, 255); font-size: 25px;"></i> \n   <div class="ui card" style="z-index: -2;"><div class="image"><div style="display: none; width: 100%; height: 345px; position: absolute; z-index: 26; background: black; text-align: center; align-items: center; place-content: center; flex-wrap: wrap;"><span class="ui header" style="color: white; font-style: normal; padding-top: 5rem; padding-left: 10px; padding-right: 10px; font-size: large; width: 100%; font-weight: 300;">Reenrollment will delete all previous voice, face, and video enrollments.\n            Proceed?</span> \n            <div><i class="ic icon arrow circle left arrowButton"></i> \n               <i class="ic icons icon arrow circle right arrowButton"></i></div></div> \n         <div style="display: none; width: 100%; height: 345px; position: absolute; z-index: 26; background: black; text-align: center; align-items: center; place-content: center; flex-wrap: wrap;"><h4 style="margin-bottom: 7%; font-weight: normal; max-width: 80%; color: white; font-style: normal;">Please move closer to the camera. You&#39;ll be performing a predetermined number of liveness challenges. A few examples of the challenges could be the following:</h4> \n            <img src="" style="width: 70%;"/> \n            <a class="ui basic label" style="color: rgb(0, 0, 0); position: absolute; bottom: 0px;">Skip</a></div> \n         <div style="position: relative; justify-content: center; display: flex; min-height: 365px; width: 100%;"><div style="display: flex; position: absolute; min-height: 345px; width: 100%; z-index: 1; background: rgba(0, 0, 0, 0.5); opacity: 1;"></div> \n            <canvas width="460" height="345" class="viCanvas" style="position: absolute; top: 6%; z-index: 2;"></canvas> \n            <button class="small ui inverted basic button viReadyButton" style="position: absolute; bottom: 0%; z-index: 8; margin: auto; font-weight: 600; display: inline-block; opacity: 1;">Click to begin<i class="chevron circle right icon"></i></button> \n            <canvas class="viImageCanvas" height="480" width="640" style="top: 6%; width: 100%; position: absolute; opacity: 1;"></canvas></div> \n         <video id="videoLiveness" autoplay="" playsinline=""></video></div> \n      <div class="content" style="bottom: 3.5em; z-index: 6; position: relative; padding: 0px; background-color: black; text-align: center;"><a class="ui header" style="color: rgb(46, 204, 113); height: 2em;"><span style="font-style: normal; max-width: 300px; color: rgb(255, 255, 255);"></span></a></div> \n      <div class="extra content" style="background-color: rgb(0, 0, 0);"><a href="https://voiceit.io" target="_blank"><img id="powered-by" src=""/></a></div></div>',t=k,r="class",null==(l="viModal ui modal transition visible active")?t.removeAttribute(r):t.getAttribute(r)!==l&&t.setAttribute(r,l),f(k,"max-width","460px"),f(k,"min-width","460px"),f(k,"overflow","hidden"),f(k,"margin-bottom","8%"),f(k,"background","transparent")},m(t,e){l(t,n,e),r(n,i),r(i,o),r(i,a),r(n,h),r(n,g),r(g,m),r(g,b),r(n,y),r(n,v),r(v,x),r(v,$),l(t,w,e),l(t,k,e)},p(t,[e]){1&e&&p(a,t[0]),2&e&&p(b,t[1]),4&e&&p($,t[2])},i:t,o:t,d(t){t&&s(n),t&&s(w),t&&s(k)}}}function j(t,e,n){let{biometricType:i}=e,{callType:o}=e,{doLiveness:a}=e;return t.$$set=t=>{"biometricType"in t&&n(0,i=t.biometricType),"callType"in t&&n(1,o=t.callType),"doLiveness"in t&&n(2,a=t.doLiveness)},[i,o,a]}return class extends class{$destroy(){!function(t,e){const n=t.$$;null!==n.fragment&&(i(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}(this,1),this.$destroy=t}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){var e;this.$$set&&(e=t,0!==Object.keys(e).length)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}{constructor(t){super(),C(this,t,j,E,a,{biometricType:0,callType:1,doLiveness:2})}}}();
//# sourceMappingURL=voiceit2.js.map
